@page "/register"

<PageTitle>Sign Up - Clever Docs</PageTitle>

<div class="min-h-screen bg-base-200 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <!-- Header -->
        <div class="text-center">
            <div class="flex justify-center">
                <div class="bg-primary rounded-full p-3 mb-4">
                    <svg class="w-8 h-8 text-primary-content" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                </div>
            </div>
            <h2 class="text-3xl font-bold text-base-content">Create your account</h2>
            <p class="mt-2 text-sm text-base-content/70">Join thousands of teams using CleverDocs</p>
        </div>

        <!-- Registration Form -->
        <div class="card bg-base-100 shadow-xl">
            <div class="card-body">
                <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
                    <DataAnnotationsValidator />
                    
                    <!-- Name Fields -->
                    <div class="grid grid-cols-2 gap-4">
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text">First name</span>
                            </label>
                            <InputText @bind-Value="registerModel.FirstName" 
                                      class="input input-bordered w-full" 
                                      placeholder="John" />
                            <ValidationMessage For="@(() => registerModel.FirstName)" class="text-error text-sm mt-1" />
                        </div>
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text">Last name</span>
                            </label>
                            <InputText @bind-Value="registerModel.LastName" 
                                      class="input input-bordered w-full" 
                                      placeholder="Doe" />
                            <ValidationMessage For="@(() => registerModel.LastName)" class="text-error text-sm mt-1" />
                        </div>
                    </div>

                    <!-- Email Field -->
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Email address</span>
                        </label>
                        <InputText @bind-Value="registerModel.Email" 
                                  class="input input-bordered w-full" 
                                  placeholder="you@example.com" />
                        <ValidationMessage For="@(() => registerModel.Email)" class="text-error text-sm mt-1" />
                    </div>

                    <!-- Password Field -->
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Password</span>
                        </label>
                        <InputText @bind-Value="registerModel.Password" 
                                  type="password" 
                                  class="input input-bordered w-full" 
                                  placeholder="••••••••" />
                        <ValidationMessage For="@(() => registerModel.Password)" class="text-error text-sm mt-1" />
                        <div class="label">
                            <span class="label-text-alt text-base-content/60">Must be at least 8 characters</span>
                        </div>
                    </div>

                    <!-- Confirm Password Field -->
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Confirm password</span>
                        </label>
                        <InputText @bind-Value="registerModel.ConfirmPassword" 
                                  type="password" 
                                  class="input input-bordered w-full" 
                                  placeholder="••••••••" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-error text-sm mt-1" />
                    </div>

                    <!-- Terms and Privacy -->
                    <div class="form-control">
                        <label class="label cursor-pointer justify-start">
                            <InputCheckbox @bind-Value="registerModel.AcceptTerms" class="checkbox checkbox-sm" />
                            <span class="label-text ml-2">
                                I agree to the 
                                <a href="/terms" class="link link-primary">Terms of Service</a> 
                                and 
                                <a href="/privacy" class="link link-primary">Privacy Policy</a>
                            </span>
                        </label>
                        <ValidationMessage For="@(() => registerModel.AcceptTerms)" class="text-error text-sm mt-1" />
                    </div>

                    <!-- Error Message -->
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-error mt-4">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <span>@errorMessage</span>
                        </div>
                    }

                    <!-- Success Message -->
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success mt-4">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <span>@successMessage</span>
                        </div>
                    }

                    <!-- Register Button -->
                    <div class="form-control mt-6">
                        <button type="submit" class="btn btn-primary w-full" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="loading loading-spinner loading-sm"></span>
                                <span>Creating account...</span>
                            }
                            else
                            {
                                <span>Create account</span>
                            }
                        </button>
                    </div>
                </EditForm>

                <!-- Social Login -->
                @* <div class="divider">Or continue with</div> *@
                @* <div class="grid grid-cols-2 gap-4"> *@
                @*     <button class="btn btn-outline"> *@
                @*         <svg class="w-5 h-5" viewBox="0 0 24 24"> *@
                @*             <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/> *@
                @*             <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/> *@
                @*             <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/> *@
                @*             <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/> *@
                @*         </svg> *@
                @*         Google *@
                @*     </button> *@
                @*     <button class="btn btn-outline"> *@
                @*         <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24"> *@
                @*             <path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"/> *@
                @*         </svg> *@
                @*         Twitter *@
                @*     </button> *@
                @* </div> *@

                <!-- Login Link -->
                <div class="text-center mt-6">
                    <span class="text-base-content/70">Already have an account?</span>
                    <a href="/login" class="link link-primary ml-1">Sign in</a>
                </div>
            </div>
        </div>
    </div>
</div>

@using CleverDocs.Client.Services
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

@code {
    private RegisterModel registerModel = new();
    private string errorMessage = "";
    private string successMessage = "";
    private bool isLoading = false;

    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            var (success, error) = await AuthService.RegisterAsync(
                registerModel.FirstName,
                registerModel.LastName,
                registerModel.Email,
                registerModel.Password);

            if (success)
            {
                successMessage = "Account created successfully! Redirecting...";
                
                // Redirect to home page after successful registration
                await Task.Delay(1500); // Show success message briefly
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = error ?? "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during registration. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class RegisterModel : IValidatableObject
    {
        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; } = "";

        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; } = "";

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password")]
        public string ConfirmPassword { get; set; } = "";

        [Range(typeof(bool), "true", "true", ErrorMessage = "You must accept the terms and conditions")]
        public bool AcceptTerms { get; set; } = false;

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (Password != ConfirmPassword)
            {
                yield return new ValidationResult("Passwords do not match", new[] { nameof(ConfirmPassword) });
            }
        }
    }
} 