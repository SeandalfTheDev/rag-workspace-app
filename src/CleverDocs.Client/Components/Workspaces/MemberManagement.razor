@using CleverDocs.Client.Shared.Workspaces
@using CleverDocs.Client.Shared.Enums
@inject IJSRuntime JSRuntime

<div class="card bg-base-100 shadow-xl">
    <div class="card-body">
        <div class="flex justify-between items-center mb-6">
            <h2 class="card-title text-2xl">Workspace Members</h2>
            @if (canManageMembers)
            {
                <button class="btn btn-primary" @onclick="ShowInviteModal">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                    Invite Member
                </button>
            }
        </div>

        @if (isLoading)
        {
            <div class="flex justify-center py-8">
                <span class="loading loading-spinner loading-lg"></span>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-error">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>@errorMessage</span>
            </div>
        }
        else
        {
            <!-- Member List -->
            <div class="space-y-4">
                @foreach (var member in members)
                {
                    <div class="flex items-center justify-between p-4 border border-base-300 rounded-lg hover:bg-base-50 transition-colors">
                        <div class="flex items-center space-x-4">
                            <!-- Avatar -->
                            <div class="avatar placeholder">
                                <div class="bg-primary text-primary-content rounded-full w-12 h-12">
                                    <span class="text-lg">@GetInitials(member.FirstName, member.LastName)</span>
                                </div>
                            </div>
                            
                            <!-- Member Info -->
                            <div>
                                <div class="font-semibold text-base-content">@member.FirstName @member.LastName</div>
                                <div class="text-sm text-base-content/70">@member.Email</div>
                                <div class="text-xs text-base-content/50">Joined @member.JoinedAt.ToString("MMM dd, yyyy")</div>
                            </div>
                        </div>

                        <div class="flex items-center space-x-3">
                            <!-- Role Badge -->
                            <div class="badge @GetRoleBadgeClass(member.Role)">
                                @GetRoleDisplayName(member.Role)
                            </div>

                            <!-- Actions -->
                            @if (canManageMembers && member.UserId != currentUserId)
                            {
                                <div class="dropdown dropdown-end">
                                    <div tabindex="0" role="button" class="btn btn-ghost btn-sm">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path>
                                        </svg>
                                    </div>
                                    <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                                        @if (canChangeRole)
                                        {
                                            <li><a @onclick="() => ShowChangeRoleModal(member)">Change Role</a></li>
                                        }
                                        <li><a @onclick="() => RemoveMember(member)" class="text-error">Remove Member</a></li>
                                    </ul>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>

            <!-- Pending Invitations Section -->
            @if (canManageMembers && pendingInvitations.Any())
            {
                <div class="divider"></div>
                <div class="mt-8">
                    <h3 class="text-lg font-semibold mb-4">Pending Invitations</h3>
                    <div class="space-y-3">
                        @foreach (var invitation in pendingInvitations)
                        {
                            <div class="flex items-center justify-between p-3 border border-warning/30 bg-warning/10 rounded-lg">
                                <div class="flex items-center space-x-3">
                                    <div class="avatar placeholder">
                                        <div class="bg-warning text-warning-content rounded-full w-10 h-10">
                                            <span class="text-sm">ðŸ“§</span>
                                        </div>
                                    </div>
                                    <div>
                                        <div class="font-medium">@invitation.Email</div>
                                        <div class="text-sm text-base-content/70">
                                            Invited by @invitation.InvitedByName â€¢ @invitation.CreatedAt.ToString("MMM dd, yyyy")
                                        </div>
                                        <div class="text-xs text-base-content/50">
                                            Expires: @invitation.ExpiresAt.ToString("MMM dd, yyyy")
                                        </div>
                                    </div>
                                </div>
                                <div class="flex items-center space-x-2">
                                    <div class="badge badge-warning">@GetRoleDisplayName(invitation.Role)</div>
                                    <button class="btn btn-ghost btn-xs text-error" @onclick="() => CancelInvitation(invitation)">
                                        Cancel
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

<!-- Invite Member Modal -->
<div class="modal @(showInviteModal ? "modal-open" : "")" id="invite-modal">
    <div class="modal-box">
        <h3 class="font-bold text-lg">Invite New Member</h3>
        
        <EditForm Model="inviteForm" OnValidSubmit="SendInvitation">
            <DataAnnotationsValidator />
            
            <div class="form-control mt-4">
                <label class="label">
                    <span class="label-text">Email Address</span>
                </label>
                <InputText @bind-Value="inviteForm.Email" 
                          class="input input-bordered w-full" 
                          placeholder="user@example.com" />
                <ValidationMessage For="@(() => inviteForm.Email)" class="text-error text-sm mt-1" />
            </div>

            <div class="form-control mt-4">
                <label class="label">
                    <span class="label-text">Role</span>
                </label>
                <InputSelect @bind-Value="inviteForm.Role" class="select select-bordered w-full">
                    <option value="@WorkspaceRole.Member">Member</option>
                    <option value="@WorkspaceRole.Admin">Admin</option>
                    @if (currentUserRole == WorkspaceRole.Owner)
                    {
                        <option value="@WorkspaceRole.Owner">Owner</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => inviteForm.Role)" class="text-error text-sm mt-1" />
            </div>

            <div class="form-control mt-4">
                <label class="label">
                    <span class="label-text">Personal Message (Optional)</span>
                </label>
                <InputTextArea @bind-Value="inviteForm.InvitationMessage" 
                              class="textarea textarea-bordered w-full" 
                              placeholder="Join our workspace to collaborate on documents..."
                              rows="3" />
            </div>

            @if (!string.IsNullOrEmpty(inviteErrorMessage))
            {
                <div class="alert alert-error mt-4">
                    <span>@inviteErrorMessage</span>
                </div>
            }

            <div class="modal-action">
                <button type="button" class="btn" @onclick="CloseInviteModal">Cancel</button>
                <button type="submit" class="btn btn-primary" disabled="@isInviting">
                    @if (isInviting)
                    {
                        <span class="loading loading-spinner loading-sm mr-2"></span>
                    }
                    Send Invitation
                </button>
            </div>
        </EditForm>
    </div>
</div>

<!-- Change Role Modal -->
<div class="modal @(showChangeRoleModal ? "modal-open" : "")" id="change-role-modal">
    <div class="modal-box">
        <h3 class="font-bold text-lg">Change Member Role</h3>
        
        @if (selectedMember != null)
        {
            <div class="mt-4">
                <p class="mb-4">Change role for <strong>@selectedMember.FirstName @selectedMember.LastName</strong></p>
                
                <EditForm Model="changeRoleForm" OnValidSubmit="UpdateMemberRole">
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">New Role</span>
                        </label>
                        <InputSelect @bind-Value="changeRoleForm.Role" class="select select-bordered w-full">
                            <option value="@WorkspaceRole.Member">Member</option>
                            <option value="@WorkspaceRole.Admin">Admin</option>
                            @if (currentUserRole == WorkspaceRole.Owner)
                            {
                                <option value="@WorkspaceRole.Owner">Owner</option>
                            }
                        </InputSelect>
                    </div>

                    @if (!string.IsNullOrEmpty(roleChangeErrorMessage))
                    {
                        <div class="alert alert-error mt-4">
                            <span>@roleChangeErrorMessage</span>
                        </div>
                    }

                    <div class="modal-action">
                        <button type="button" class="btn" @onclick="CloseChangeRoleModal">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@isChangingRole">
                            @if (isChangingRole)
                            {
                                <span class="loading loading-spinner loading-sm mr-2"></span>
                            }
                            Update Role
                        </button>
                    </div>
                </EditForm>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public Guid WorkspaceId { get; set; }
    [Parameter] public Guid CurrentUserId { get; set; }
    [Parameter] public WorkspaceRole CurrentUserRole { get; set; }

    private List<WorkspaceMemberDto> members = new();
    private List<WorkspaceInvitationDto> pendingInvitations = new();
    private bool isLoading = true;
    private string errorMessage = "";
    
    // Permissions
    private bool canManageMembers => CurrentUserRole == WorkspaceRole.Owner || CurrentUserRole == WorkspaceRole.Admin;
    private bool canChangeRole => CurrentUserRole == WorkspaceRole.Owner;
    private Guid currentUserId => CurrentUserId;
    private WorkspaceRole currentUserRole => CurrentUserRole;

    // Invite Modal
    private bool showInviteModal = false;
    private bool isInviting = false;
    private string inviteErrorMessage = "";
    private InviteForm inviteForm = new();

    // Change Role Modal
    private bool showChangeRoleModal = false;
    private bool isChangingRole = false;
    private string roleChangeErrorMessage = "";
    private WorkspaceMemberDto? selectedMember;
    private ChangeRoleForm changeRoleForm = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadMembersAsync();
        if (canManageMembers)
        {
            await LoadPendingInvitationsAsync();
        }
    }

    private async Task LoadMembersAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            
            // TODO: Call API to get workspace members
            // var response = await HttpClient.GetFromJsonAsync<List<WorkspaceMemberDto>>($"/api/workspaces/{WorkspaceId}/members");
            // members = response ?? new List<WorkspaceMemberDto>();
            
            // Mock data for now
            members = new List<WorkspaceMemberDto>();
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load workspace members";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadPendingInvitationsAsync()
    {
        try
        {
            // TODO: Call API to get pending invitations
            // var response = await HttpClient.GetFromJsonAsync<List<WorkspaceInvitationDto>>($"/api/workspaces/{WorkspaceId}/invitations");
            // pendingInvitations = response ?? new List<WorkspaceInvitationDto>();
            
            // Mock data for now
            pendingInvitations = new List<WorkspaceInvitationDto>();
        }
        catch (Exception ex)
        {
            // Log error but don't show to user as this is secondary data
        }
    }

    private void ShowInviteModal()
    {
        inviteForm = new InviteForm();
        inviteErrorMessage = "";
        showInviteModal = true;
    }

    private void CloseInviteModal()
    {
        showInviteModal = false;
        inviteForm = new InviteForm();
        inviteErrorMessage = "";
    }

    private async Task SendInvitation()
    {
        try
        {
            isInviting = true;
            inviteErrorMessage = "";

            // TODO: Call API to send invitation
            // var request = new AddMemberRequest
            // {
            //     Email = inviteForm.Email,
            //     Role = inviteForm.Role,
            //     InvitationMessage = inviteForm.InvitationMessage
            // };
            // 
            // var response = await HttpClient.PostAsJsonAsync($"/api/workspaces/{WorkspaceId}/invitations", request);
            // if (response.IsSuccessStatusCode)
            // {
            //     CloseInviteModal();
            //     await LoadPendingInvitationsAsync();
            //     await JSRuntime.InvokeVoidAsync("showToast", "success", "Invitation sent successfully!");
            // }
            // else
            // {
            //     var error = await response.Content.ReadAsStringAsync();
            //     inviteErrorMessage = error ?? "Failed to send invitation";
            // }

            // Mock success for now
            await Task.Delay(1000);
            CloseInviteModal();
            await JSRuntime.InvokeVoidAsync("alert", "Invitation sent successfully!");
        }
        catch (Exception ex)
        {
            inviteErrorMessage = "An error occurred while sending the invitation";
        }
        finally
        {
            isInviting = false;
        }
    }

    private void ShowChangeRoleModal(WorkspaceMemberDto member)
    {
        selectedMember = member;
        changeRoleForm = new ChangeRoleForm { Role = member.Role };
        roleChangeErrorMessage = "";
        showChangeRoleModal = true;
    }

    private void CloseChangeRoleModal()
    {
        showChangeRoleModal = false;
        selectedMember = null;
        changeRoleForm = new ChangeRoleForm();
        roleChangeErrorMessage = "";
    }

    private async Task UpdateMemberRole()
    {
        if (selectedMember == null) return;

        try
        {
            isChangingRole = true;
            roleChangeErrorMessage = "";

            // TODO: Call API to update member role
            // var request = new UpdateMemberRoleRequest
            // {
            //     UserId = selectedMember.UserId,
            //     Role = changeRoleForm.Role
            // };
            //
            // var response = await HttpClient.PutAsJsonAsync($"/api/workspaces/{WorkspaceId}/members/{selectedMember.UserId}/role", request);
            // if (response.IsSuccessStatusCode)
            // {
            //     CloseChangeRoleModal();
            //     await LoadMembersAsync();
            //     await JSRuntime.InvokeVoidAsync("showToast", "success", "Member role updated successfully!");
            // }
            // else
            // {
            //     var error = await response.Content.ReadAsStringAsync();
            //     roleChangeErrorMessage = error ?? "Failed to update member role";
            // }

            // Mock success for now
            await Task.Delay(1000);
            CloseChangeRoleModal();
            await LoadMembersAsync();
            await JSRuntime.InvokeVoidAsync("alert", "Member role updated successfully!");
        }
        catch (Exception ex)
        {
            roleChangeErrorMessage = "An error occurred while updating the member role";
        }
        finally
        {
            isChangingRole = false;
        }
    }

    private async Task RemoveMember(WorkspaceMemberDto member)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove {member.FirstName} {member.LastName} from this workspace?");
        if (!confirmed) return;

        try
        {
            // TODO: Call API to remove member
            // var response = await HttpClient.DeleteAsync($"/api/workspaces/{WorkspaceId}/members/{member.UserId}");
            // if (response.IsSuccessStatusCode)
            // {
            //     await LoadMembersAsync();
            //     await JSRuntime.InvokeVoidAsync("showToast", "success", "Member removed successfully!");
            // }
            // else
            // {
            //     var error = await response.Content.ReadAsStringAsync();
            //     await JSRuntime.InvokeVoidAsync("showToast", "error", error ?? "Failed to remove member");
            // }

            // Mock success for now
            await LoadMembersAsync();
            await JSRuntime.InvokeVoidAsync("alert", "Member removed successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while removing the member");
        }
    }

    private async Task CancelInvitation(WorkspaceInvitationDto invitation)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to cancel the invitation for {invitation.Email}?");
        if (!confirmed) return;

        try
        {
            // TODO: Call API to cancel invitation
            // var response = await HttpClient.DeleteAsync($"/api/workspaces/{WorkspaceId}/invitations/{invitation.Id}");
            // if (response.IsSuccessStatusCode)
            // {
            //     await LoadPendingInvitationsAsync();
            //     await JSRuntime.InvokeVoidAsync("showToast", "success", "Invitation cancelled successfully!");
            // }
            // else
            // {
            //     var error = await response.Content.ReadAsStringAsync();
            //     await JSRuntime.InvokeVoidAsync("showToast", "error", error ?? "Failed to cancel invitation");
            // }

            // Mock success for now
            await LoadPendingInvitationsAsync();
            await JSRuntime.InvokeVoidAsync("alert", "Invitation cancelled successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while cancelling the invitation");
        }
    }

    private string GetInitials(string firstName, string lastName)
    {
        var first = string.IsNullOrEmpty(firstName) ? "" : firstName.Substring(0, 1).ToUpper();
        var last = string.IsNullOrEmpty(lastName) ? "" : lastName.Substring(0, 1).ToUpper();
        return first + last;
    }

    private string GetRoleDisplayName(WorkspaceRole role) => role switch
    {
        WorkspaceRole.Owner => "Owner",
        WorkspaceRole.Admin => "Admin",
        WorkspaceRole.Member => "Member",
        _ => "Unknown"
    };

    private string GetRoleBadgeClass(WorkspaceRole role) => role switch
    {
        WorkspaceRole.Owner => "badge-primary",
        WorkspaceRole.Admin => "badge-secondary",
        WorkspaceRole.Member => "badge-neutral",
        _ => "badge-ghost"
    };

    public class InviteForm
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Role is required")]
        public WorkspaceRole Role { get; set; } = WorkspaceRole.Member;

        public string? InvitationMessage { get; set; }
    }

    public class ChangeRoleForm
    {
        [Required(ErrorMessage = "Role is required")]
        public WorkspaceRole Role { get; set; } = WorkspaceRole.Member;
    }
} 