// <auto-generated />
using System;
using CleverDocs.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;

#nullable disable

namespace CleverDocs.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250612030650_ValueComparerUpdates")]
    partial class ValueComparerUpdates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CleverDocs.Core.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("file_extension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("filename");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_path");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("ObjectId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("object_id");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("original_filename");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UploadStatus")
                        .HasColumnType("integer")
                        .HasColumnName("upload_status");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.Property<Guid>("UploadedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("uploaded_by");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_documents");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_documents_created_at");

                    b.HasIndex("ObjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_documents_object_id");

                    b.HasIndex("UploadStatus")
                        .HasDatabaseName("ix_documents_upload_status");

                    b.HasIndex("UploadedBy")
                        .HasDatabaseName("ix_documents_uploaded_by");

                    b.HasIndex("WorkspaceId")
                        .HasDatabaseName("ix_documents_workspace_id");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("CleverDocs.Core.Entities.DocumentChunk", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<int>("ChunkIndex")
                        .HasColumnType("integer")
                        .HasColumnName("chunk_index");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Vector>("Embedding")
                        .IsRequired()
                        .HasColumnType("vector(768)")
                        .HasColumnName("embedding");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.HasKey("DocumentId", "ChunkIndex")
                        .HasName("pk_document_chunks");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_document_chunks_created_at");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_document_chunks_document_id");

                    b.HasIndex("Embedding")
                        .HasDatabaseName("ix_document_chunks_embedding_cosine");

                    b.ToTable("document_chunks", (string)null);
                });

            modelBuilder.Entity("CleverDocs.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_users_created_at");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CleverDocs.Core.Entities.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_workspaces");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_workspaces_created_at");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_workspaces_name");

                    b.ToTable("workspaces", (string)null);
                });

            modelBuilder.Entity("CleverDocs.Core.Entities.WorkspaceMember", b =>
                {
                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("WorkspaceId", "UserId")
                        .HasName("pk_workspace_members");

                    b.HasIndex("JoinedAt")
                        .HasDatabaseName("ix_workspace_members_joined_at");

                    b.HasIndex("Role")
                        .HasDatabaseName("ix_workspace_members_role");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_workspace_members_user_id");

                    b.HasIndex("WorkspaceId")
                        .HasDatabaseName("ix_workspace_members_workspace_id");

                    b.ToTable("workspace_members", (string)null);
                });

            modelBuilder.Entity("CleverDocs.Core.Entities.DocumentChunk", b =>
                {
                    b.HasOne("CleverDocs.Core.Entities.Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_document_chunks_documents_document_id");
                });

            modelBuilder.Entity("CleverDocs.Core.Entities.WorkspaceMember", b =>
                {
                    b.HasOne("CleverDocs.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workspace_members_users_user_id");

                    b.HasOne("CleverDocs.Core.Entities.Workspace", null)
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workspace_members_workspaces_workspace_id");
                });
#pragma warning restore 612, 618
        }
    }
}
